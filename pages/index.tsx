import Head from 'next/head';
import useSWR from 'swr';
import {
  AirQuality,
  CardHeader,
  Condition,
  CurrentTemp,
  Humidity,
  Precipitation,
  Pressure,
  UVIndex,
  Wind
} from '../components/Card';

import { APIRoute, getPath, Observations, Response } from '../models/api';
import styles from '../styles/Home.module.css';

const fetcher = (key: string) => fetch(key).then(res => res.json());

const useObservations = (): { observations?: Response<Observations>; isLoading: boolean; isError: boolean } => {
  const { data, error } = useSWR<Response<Observations>>(getPath(APIRoute.CURRENT), fetcher);

  return {
    observations: data,
    isLoading: !error && !data,
    isError: error
  };
};

export default function Home() {
  const { observations, isLoading, isError } = useObservations();

  return (
    <div className={styles.container}>
      <Head>
        <title>#aq Weather</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={{ display: 'flex', justifyContent: 'center', padding: '2rem 0rem' }}>
        <img src="skylines/boston.svg" style={{ height: '8rem', objectFit: 'scale-down' }}></img>
      </div>
      {observations ? (
        !isError && observations.data ? (
          <>
            <article
              style={{
                background: '#ffffff',
                margin: '1rem 0rem',
                borderRadius: '0.25rem',
                boxShadow: '0px 0.25rem 0.5rem rgba(0, 0, 0, .15)'
              }}
            >
              <CardHeader lastUpdatedTime={observations.latestReadTime * 1_000}></CardHeader>
              <div
                style={{
                  display: 'flex',
                  flexWrap: 'wrap',
                  alignItems: 'center',
                  padding: '0.5rem 1rem'
                }}
              >
                <div style={{ flexGrow: '1', flexBasis: '24.5rem' }}>
                  <CurrentTemp observations={observations}></CurrentTemp>
                  <Condition
                    condition={observations.data.nws?.textDescription}
                    sunData={observations.data?.sun}
                  ></Condition>
                </div>
                <div style={{ display: 'flex', flexWrap: 'wrap', flexBasis: '37.5rem', alignItems: 'end' }}>
                  <Wind wind={observations.data.wl?.wind}></Wind>
                  <UVIndex epaData={observations.data.epa}></UVIndex>
                  <AirQuality airnowData={observations.data.airnow}></AirQuality>
                  <Humidity humidity={observations.data.wl?.humidity}></Humidity>
                  <Pressure pressure={observations.data.wl?.pressure}></Pressure>
                  <Precipitation
                    precipitation={observations.data.wl?.rainfall?.last24Hrs}
                    label="Last 24hr Rainfall"
                  ></Precipitation>
                </div>
              </div>
            </article>
          </>
        ) : (
          <>
            <h1>Something went wrong :(</h1>
            <br />
            {observations?.errors.map(error => (
              <h3 key={error}>{error}</h3>
            ))}
          </>
        )
      ) : (
        <h1>Loading...</h1>
      )}
    </div>
  );
}
