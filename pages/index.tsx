import Head from 'next/head';
import styles from '../styles/Home.module.css';
import useSWR from 'swr';

import { APIRoute, getPath, Observations, Response } from '../models/api';
import CardDetail from '../components/CardDetail/CardDetail';

const fetcher = (key: string) => fetch(key).then(res => res.json());

const useObservations = (): { observations?: Response<Observations>; isLoading: boolean; isError: boolean } => {
  const { data, error } = useSWR<Response<Observations>>(getPath(APIRoute.CURRENT), fetcher);

  return {
    observations: data,
    isLoading: !error && !data,
    isError: error
  };
};

export default function Home() {
  const { observations, isLoading, isError } = useObservations();

  const getWindDirection = (deg: Number) => {
    if (deg > 337.5 || deg <= 22.5) return 'N';
    else if (deg <= 67.5) return 'NE';
    else if (deg <= 112.5) return 'E';
    else if (deg <= 157.5) return 'SE';
    else if (deg <= 202.5) return 'S';
    else if (deg <= 247.5) return 'SW';
    else if (deg <= 292.5) return 'W';
    else if (deg <= 337.5) return 'NW';

    return '';
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>#aq Weather</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={{ display: 'flex', justifyContent: 'center', margin: '2rem 0rem 3rem' }}>
        <img src="skylines/boston.svg" style={{ height: '8rem', objectFit: 'scale-down' }}></img>
      </div>
      {observations ? (
        !isError ? (
          <>
            <div
              style={{
                background: '#ffffff',
                padding: '0rem 1rem 0rem',
                margin: '1rem 0rem',
                borderRadius: '2px',
                boxShadow: '0px 0.25rem 0.5rem rgba(0, 0, 0, .15)'
              }}
            >
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap' }}>
                <p
                  style={{
                    margin: '0.75rem 0.75rem 0rem 0rem',
                    fontSize: '1.5rem',
                    fontWeight: '700',
                    color: '#FF5353'
                  }}
                >
                  NOW
                </p>
                <p
                  style={{
                    margin: '0.75rem 0rem 0.75rem',
                    fontSize: '1rem',
                    fontWeight: '300',
                    whiteSpace: 'nowrap'
                  }}
                >
                  Updated 3m ago
                </p>
              </div>
              <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between', alignItems: 'center' }}>
                <div style={{ flex: '0 1 auto', marginRight: '1rem' }}>
                  <h1 style={{ margin: '1rem 0rem 0rem', fontSize: '7rem', fontWeight: '400' }}>
                    <span>
                      {observations.data.wl?.temperature != null ? Math.floor(observations.data.wl.temperature) : '–'}
                    </span>
                    <span style={{ fontSize: '2rem' }}>
                      {observations.data.wl?.temperature != null
                        ? `.${(observations.data.wl.temperature * 10) % 10}`
                        : ''}
                    </span>
                    <span style={{ marginLeft: '-0.5rem' }}>°</span>
                  </h1>
                  {observations.data.wl?.feelsLike ? (
                    <p style={{ margin: '-0.25rem 0rem 0rem', fontSize: '1.25rem', fontWeight: '400' }}>
                      Feels Like {observations.data.wl.feelsLike}°
                    </p>
                  ) : (
                    <></>
                  )}
                  <div style={{ display: 'flex', alignItems: 'center', margin: '1rem 0rem 1.25rem' }}>
                    <img
                      src="pcloudy.png"
                      style={{ width: '2rem', objectFit: 'scale-down', marginRight: '0.5rem' }}
                    ></img>
                    <p style={{ margin: '0.25rem 0rem 0rem', fontSize: '2rem', fontWeight: '400' }}>
                      {observations.data.nws?.textDescription}
                    </p>
                  </div>
                </div>
                <div
                  style={{ display: 'flex', flexWrap: 'wrap', flex: '1 1', maxWidth: '36rem', justifyContent: 'end' }}
                >
                  <CardDetail
                    value={`${Math.round(observations.data.wl?.wind.speed ?? 0)} mph ${getWindDirection(
                      observations.data.wl?.wind.direction ?? 0
                    )}`}
                    secondaryValue={`${Math.round(observations.data.wl?.wind.gustSpeed ?? 0)} mph gusts`}
                    iconImgSrc="arrow.png"
                    label="Wind"
                  />
                  <CardDetail value={`5`} secondaryValue={`Moderate`} label="UV Index" />
                  <CardDetail value={`47`} secondaryValue={`Good`} label="Air Quality" />
                  <CardDetail value={`${Math.round(observations.data.wl?.humidity ?? 0)}%`} label="Humidity" />
                  <CardDetail value={`${observations.data.wl?.pressure.atSeaLevel} in ↓`} label="Pressure" />
                  <CardDetail value={`– in`} label="Last 24hr Precipitation" />
                </div>
              </div>
            </div>
            {/* <h1>{observations.data.nws?.textDescription}</h1>
            <h1>{`feels like: ${observations.data.wl?.feelsLike}`}</h1>
            <h1>{`humidity: ${observations.data.wl?.humidity}`}</h1>
            <h1>{`wind.speed: ${observations.data.wl?.wind.speed}`}</h1>
            <h1>{`wind.direction: ${observations.data.wl?.wind.direction}`}</h1>
            <h1>{`wind.gustSpeed: ${observations.data.wl?.wind.gustSpeed}`}</h1>
            <h1>{`pressure.atSeaLevel: ${observations.data.wl?.pressure.atSeaLevel}`}</h1>
            <h1>{`pressure.trend: ${observations.data.wl?.pressure.trend}`}</h1> */}
          </>
        ) : (
          <>
            <h1>Something went wrong :(</h1>
            <br />
            {observations?.errors.map(error => (
              <h3 key={error}>{error}</h3>
            ))}
          </>
        )
      ) : (
        <h1>Loading...</h1>
      )}
    </div>
  );
}
